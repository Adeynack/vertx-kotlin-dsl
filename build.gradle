buildscript {

    ext {
        PUBLISH_VERSION = '0.1'
        kotlin_version = '1.2.10'
        vertx_version = '3.4.2'
        jackson_version = '2.9.3'
        junit_version = '4.12'
    }

    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
    }
}

plugins {
    id "java"
    id "org.jetbrains.kotlin.jvm" version "1.2.10"
    id "idea"
    id "net.ltgt.errorprone" version "0.0.13"
    id "com.jfrog.bintray" version "1.7.3"
    id "maven-publish"
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

repositories {
    mavenCentral()
    jcenter()
    mavenLocal()
}

dependencies {

    def withoutJackson = {
        exclude group: "com.fasterxml.jackson.core"
        exclude group: "com.fasterxml.jackson.module"
    }

    //
    // PRODUCTION
    //

    // Kotlin and language extensions
    compile "org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    // ErrorProne
    compile "com.google.errorprone:error_prone_core:2.1.3"

    // VERT.X
    compile "io.vertx:vertx-core:$vertx_version", withoutJackson
    compile "io.vertx:vertx-web:$vertx_version", withoutJackson
    compile "io.vertx:vertx-lang-kotlin:$vertx_version", withoutJackson
    compile "io.vertx:vertx-web-client:$vertx_version", withoutJackson

    compile "com.fasterxml.jackson.module:jackson-module-kotlin:$jackson_version"

    //
    // TEST
    //

    // JUnit
    testCompile "junit:junit:$junit_version"

    // Vert.x Unit
    testCompile "io.vertx:vertx-unit:$vertx_version"

}

compileKotlin {
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:all" << "-Xlint:-processing" << "-Xlint:-serial" << "-Werror"
}

tasks.withType(Test) {
    afterTest { desc, result ->
        String rt = result.resultType.toString()
        String successIcon = rt == "SUCCESS" ? "üîπ" : rt == "FAILURE" ? "‚ùå" : "üî∏Ô∏è"
        logger.quiet "‚ì£  ${successIcon}  ${desc.className}#`${desc.name}` : ${rt}"
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

publishing {
    publications {
        MavenPub(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            groupId 'com.github.adeynack'
            version "$PUBLISH_VERSION"
        }
    }
}

bintray {
    user = System.getenv()["BINTRAY_USER"]
    key = System.getenv()["BINTRAY_API_KEY"]
    publications = ['MavenPub']
    pkg {
        repo = 'vertx-kotlin-dsl'
        name = 'vertx-kotlin-dsl'
        licenses = ['MIT']
        vcsUrl = 'https://github.com/adeynack/vertx-kotlin-dsl.git'
        version {
            name = "$PUBLISH_VERSION"
        }
    }
}
